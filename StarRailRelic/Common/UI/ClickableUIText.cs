namespace StarRailRelic.Common.UI {     public class ClickableUIText : UIText     {         private bool hovered;         private Vector2 originalPosition;          public event MouseEvent OnLeftClickButton;          private float hoveredScale;         private Color shadowColor;         private Color hoveredShadowColor;          //[UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_text")]         //public static extern ref object GetSetText(UIText uiText);          public ClickableUIText(string text, float left, float top, float textScale = 1, float hoveredScale = 1.2f, bool large = false) : base(text, textScale, large)         {             hoveredShadowColor = Color.DarkRed;              Initialize(left, top, hoveredScale);         }          public ClickableUIText(string text, float left, float top, Color hoveredShadowColor, float textScale = 1, float hoveredScale = 1.2f, bool large = false) : base(text, textScale, large)         {             this.hoveredShadowColor = hoveredShadowColor;              Initialize(left, top, hoveredScale);         }          private void Initialize(float left, float top, float hoveredScale)         {             TextColor = Color.Yellow;             shadowColor = Color.Black;              Left.Set(left, 0f);             Top.Set(top, 0f);              originalPosition = new Vector2(Left.Pixels, Top.Pixels);              this.hoveredScale = hoveredScale;         }          public void AddMouseEvent(MouseEvent clickEvent)         {             OnLeftClickButton += clickEvent;         }          public override void LeftClick(UIMouseEvent evt)         {             OnLeftClickButton?.Invoke(evt, this);             Parent?.LeftClick(evt);              _ = SoundEngine.PlaySound(SoundID.MenuTick);              //ref object text = ref GetSetText(this);             //text = "拿走";         }          public override void MouseOver(UIMouseEvent evt)         {             base.MouseOver(evt);             TextColor = Color.Yellow;             if (!hovered)             {                 _ = SoundEngine.PlaySound(SoundID.MenuTick);                  Vector2 halfTextSize = this.GetTextWidthAndHeight() / 2;                  Vector2 offset = halfTextSize - halfTextSize * hoveredScale;                  Left.Pixels += offset.X;                 Top.Pixels += offset.Y;                                  SetText(Text, hoveredScale, false);                 ShadowColor = hoveredShadowColor;                 hovered = true;             }         }          public override void MouseOut(UIMouseEvent evt)         {             base.MouseOut(evt);              Left.Pixels = originalPosition.X;             Top.Pixels = originalPosition.Y;              SetText(Text, 1f, false);             ShadowColor = shadowColor;             hovered = false;         }     } }