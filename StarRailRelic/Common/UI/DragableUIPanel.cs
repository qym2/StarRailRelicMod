namespace StarRailRelic.Common.UI {     public class DragableUIPanel(bool gragable = true) : UIPanel     {         private Vector2 offset;         private bool dragging;          public override void LeftMouseDown(UIMouseEvent evt)         {             base.LeftMouseDown(evt);              if (gragable)             {                 DragStart(evt);             }         }          public override void LeftMouseUp(UIMouseEvent evt)         {             base.LeftMouseUp(evt);              if (gragable)             {                 DragEnd(evt);             }         }          /// <summary>         /// 开始拖动         /// </summary>         private void DragStart(UIMouseEvent evt)         {             //保证面板随着鼠标平滑移动             offset = new Vector2(evt.MousePosition.X - Left.Pixels, evt.MousePosition.Y - Top.Pixels);             dragging = true;         }          /// <summary>         /// 结束拖动         /// </summary>         private void DragEnd(UIMouseEvent evt)         {             Vector2 endMousePosition = evt.MousePosition;             dragging = false;              Left.Set(endMousePosition.X - offset.X, 0f);             Top.Set(endMousePosition.Y - offset.Y, 0f);              Recalculate();         }          public override void Update(GameTime gameTime)         {             base.Update(gameTime);
             if (ContainsPoint(Main.MouseScreen))             {                 Main.LocalPlayer.mouseInterface = true;             }              if (dragging)             {                 Left.Set(Main.mouseX - offset.X, 0f);                 Top.Set(Main.mouseY - offset.Y, 0f);                 Recalculate();             }              Rectangle parentSpace = Parent.GetDimensions().ToRectangle();             if (!GetDimensions().ToRectangle().Intersects(parentSpace))             {                 Left.Pixels = Terraria.Utils.Clamp(Left.Pixels, 0, parentSpace.Right - Width.Pixels);                 Top.Pixels = Terraria.Utils.Clamp(Top.Pixels, 0, parentSpace.Bottom - Height.Pixels);                  Recalculate();             }         }          public ClickableUIText AddTextButton(string buttonText, float leftOffset = 0, float topOffset = 0, float hoveredScale = 1.2f)         {             ClickableUIText clickableUIText = new(buttonText, 20 + leftOffset, Height.Pixels - 45 + topOffset, 1, hoveredScale);             Append(clickableUIText);              return clickableUIText;         }          public ClickableUIText AddTextButton(string buttonText, float hoveredScale = 1.1f)
        {
            return AddTextButton(buttonText, 0, 0, hoveredScale);
        }     } } 